def nod(a, b):
    a, b, r0 :: object
    r1 :: int32
    r2 :: bit
    r3 :: bool
    r4 :: object
    r5 :: int32
    r6 :: bit
    r7 :: bool
    r8, r9, r10 :: object
L0:
    goto L13
L1:
    r0 = PyObject_RichCompare(a, b, 3)
    if is_error(r0) goto L14 (error at nod:2) else goto L2
L2:
    r1 = PyObject_IsTrue(r0)
    dec_ref r0
    r2 = r1 >= 0 :: signed
    if not r2 goto L14 (error at nod:2) else goto L3 :: bool
L3:
    r3 = truncate r1: int32 to builtins.bool
    if r3 goto L4 else goto L15 :: bool
L4:
    r4 = PyObject_RichCompare(a, b, 4)
    if is_error(r4) goto L14 (error at nod:3) else goto L5
L5:
    r5 = PyObject_IsTrue(r4)
    dec_ref r4
    r6 = r5 >= 0 :: signed
    if not r6 goto L14 (error at nod:3) else goto L6 :: bool
L6:
    r7 = truncate r5: int32 to builtins.bool
    if r7 goto L7 else goto L9 :: bool
L7:
    r8 = PyNumber_InPlaceSubtract(a, b)
    dec_ref a
    if is_error(r8) goto L16 (error at nod:4) else goto L8
L8:
    a = r8
    goto L1
L9:
    r9 = PyNumber_InPlaceSubtract(b, a)
    dec_ref b
    if is_error(r9) goto L17 (error at nod:6) else goto L10
L10:
    b = r9
    goto L1
L11:
    return a
L12:
    r10 = <error> :: object
    return r10
L13:
    inc_ref a
    inc_ref b
    goto L1
L14:
    dec_ref a
    dec_ref b
    goto L12
L15:
    dec_ref b
    goto L11
L16:
    dec_ref b
    goto L12
L17:
    dec_ref a
    goto L12

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: dict
    r6 :: str
    r7 :: object
    r8, r9 :: str
    r10 :: object
    r11 :: str
    r12 :: object
    r13 :: object[2]
    r14 :: object_ptr
    r15 :: object
    r16 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L8 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = euc_module.globals :: static
    r6 = '__name__'
    r7 = CPyDict_GetItem(r5, r6)
    if is_error(r7) goto L8 (error at <module>:9) else goto L4
L4:
    r8 = cast(str, r7)
    if is_error(r8) goto L8 (error at <module>:9) else goto L5
L5:
    r9 = 'was imported'
    r10 = builtins :: module
    r11 = 'print'
    r12 = CPyObject_GetAttr(r10, r11)
    if is_error(r12) goto L9 (error at <module>:9) else goto L6
L6:
    r13 = [r8, r9]
    r14 = load_address r13
    r15 = _PyObject_Vectorcall(r12, r14, 2, 0)
    dec_ref r12
    if is_error(r15) goto L9 (error at <module>:9) else goto L10
L7:
    dec_ref r8
    return 1
L8:
    r16 = <error> :: None
    return r16
L9:
    dec_ref r8
    goto L8
L10:
    dec_ref r15
    goto L7
